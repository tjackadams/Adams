# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: 'Laptop'

steps:

- task: UseDotNet@2
  displayName: 'install dotnet 5.x'
  inputs:
    packageType: 'sdk'
    version: '5.x'

- task: UseDotNet@2
  displayName: 'install dotnet 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- task: DotNetCoreCLI@2
  displayName: 'dotnet tool restore'
  inputs: 
   command: 'custom'
   custom: 'tool'
   arguments: 'restore'

- task: Kubernetes@1
  displayName: 'k3s connection'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Local K3S'
    command: 'get'
    arguments: 'nodes'
    outputFormat: none

- task: Docker@2
  displayName: 'docker login'
  inputs:
    containerRegistry: 'DockerHub'
    command: 'login'

- script: $(Agent.BuildDirectory)/tools/tye deploy tye.production.yaml --verbosity debug 
  workingDirectory: 'src'
  displayName: 'Build and deploy'

- task: DotNetCoreCLI@2
  displayName: 'generate smokingdb sql migration scripts'
  inputs:
    command: 'custom'
    custom: 'ef'
    arguments: migrations script --output $(Build.SourcesDirectory)/migrations/smokingdb.sql --idempotent --project $(Build.SourcesDirectory)/src/Services/Smoking/Smoking.Api/Smoking.Api.csproj --configuration Debug
   
- task: PublishBuildArtifacts@1
  displayName: 'publish smokingdb sql migration scripts'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/migrations/smokingdb.sql
    ArtifactName: scripts

- task: SqlDacpacDeploymentOnMachineGroup@0
  displayName: 'deploy smoking db'
  inputs:
    TaskType: 'sqlQuery'
    SqlFile: '$(Build.SourcesDirectory)\migrations\smokingdb.sql'
    ServerName: '192.168.139.29'
    DatabaseName: 'Adams.Service.SmokingDb'
    AuthScheme: 'sqlServerAuthentication'
    SqlUsername: 'sa'
    SqlPassword: 'Jasper2854'

- task: Kubernetes@1
  displayName: 'rollout identity-api'
  inputs:
   connectionType: Kubernetes Service Connection
   kubernetesServiceEndpoint: 'Local K3S'
   namespace: 'default'
   command: rollout
   arguments: restart deployment identity-api

- task: Kubernetes@1
  displayName: 'rollout smoking-api'
  inputs:
   connectionType: Kubernetes Service Connection
   kubernetesServiceEndpoint: 'Local K3S'
   namespace: 'default'
   command: rollout
   arguments: restart deployment smoking-api

- task: Kubernetes@1
  displayName: 'rollout webblazor'
  inputs:
   connectionType: Kubernetes Service Connection
   kubernetesServiceEndpoint: 'Local K3S'
   namespace: 'default'
   command: rollout
   arguments: restart deployment webblazor
   
- task: Kubernetes@1
  displayName: 'rollout apigw'
  inputs:
   connectionType: Kubernetes Service Connection
   kubernetesServiceEndpoint: 'Local K3S'
   namespace: 'default'
   command: rollout
   arguments: restart deployment apigw
   
- task: Kubernetes@1
  displayName: 'rollout webstatus'
  inputs:
   connectionType: Kubernetes Service Connection
   kubernetesServiceEndpoint: 'Local K3S'
   namespace: 'default'
   command: rollout
   arguments: restart deployment webstatus

- task: KubernetesManifest@0
  displayName: 'patch ingress'
  inputs:
   action: patch
   kind: ingress
   name: ingress
   patch: '{"metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-production"}},"spec":{"tls":[{"hosts":["app.itadams.co.uk"],"secretName":"webblazor-production-tls"},{"hosts":["identity.itadams.co.uk"],"secretName":"identity-api-production-tls"},{"hosts":["status.itadams.co.uk"],"secretName":"webstatus-production-tls"},{"hosts":["api.itadams.co.uk"],"secretName":"api-production-tls"}]}}'
   kubernetesServiceConnection: 'Local K3S'